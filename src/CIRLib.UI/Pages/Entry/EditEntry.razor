@page "/edit-entry"
@page "/edit-entry/{Id:guid}"

@using CIRLIB.UI.Pages;
@using Microsoft.Extensions.Logging;
@using System.Security.Claims;
@using Microsoft.AspNetCore.Components.Forms
@using ObjModels = CIRLib.ObjectModel.Models;
@using CIRServices;

@inject EntryServices Services
@inject NavigationManager NavigationManager
@inject CIRLib.Persistence.CIRLibContextFactory Factory 
@inject ILogger<EntryViewModel> Logger

@if (Id is null )
{
    <PageTitle> Add Entry</PageTitle>
    <h3> Add a new Entry</h3>
}else{
    <PageTitle> Edit Entry</PageTitle>
    <h3> Edit Entry</h3>
}
@if ( !string.IsNullOrEmpty(error) )
        {
            <div class="col-span-full">
                <span class="text-red-500">@error</span>
            </div>
}
<EditForm Model="@viewModel" OnValidSubmit="@HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="grid gap-2">
        <div>
            <label>
                <h3 class="col-span-2">Entry Id 
                    @if (Id is not null ){  
                        <button type ="button" style="float:right" class="btn btn-danger" @onclick="(() =>DeleteRegistry((Guid)Id))">
                                Delete
                        </button>
                    }
                </h3>
                @if (Id is null ){                            
                    <InputText type="text" @bind-Value="viewModel.IdInSource" 
                        placeholder="Enter Entry Id" class="form-input w-full" />
                }else{
                    <InputText readonly="true" type="text" @bind-Value="viewModel.IdInSource"
                        class="form-input w-full" />
                }
            </label>
        </div>
        <div>
            <label>
                <h3>Source Id</h3>
                <InputText type="text" class="form-input w-full" @bind-Value="viewModel.SourceId" />
            </label>
        </div>
        <div>
            <label>
                <h3>CIRID</h3>
                <InputText type="text" class="form-input w-full" @bind-Value="viewModel.CIRId" />
            </label>
        </div>
        <div>
            <label>
                <h3>Id In Source</h3>
                <InputText type="text" class="form-input w-full" @bind-Value="viewModel.SourceOwnerId" />
            </label>
        </div>
        <div>
            <label>
                <h3>Name</h3>
                <InputText type="text" class="form-input w-full" @bind-Value="viewModel.Name" />
            </label>
        </div>
        <div>
            <label>
                <h3>Description</h3>
                <InputText type="text" class="form-input w-full" @bind-Value="viewModel.Description" />
            </label>
        </div>
        <div>
            <label>
                <h3>Inactive
                <input type="checkbox" align="left"  @bind="viewModel.Inactive" /> </h3>
            </label>
        </div>
        <div>
            <label>
                <h3>Category Ref Id
                <InputText type="text" class="form-input w-full" @bind-Value="viewModel.CategoryId" /> </h3>
            </label>
        </div>
        <div>
            <label>
                <h3>Registry Ref Id
                <InputText type="text" class="form-input w-full" @bind-Value="viewModel.RegistryId" /> </h3>
            </label>
        </div>
    </div>
    <button type="submit" class="btn-primary inline-flex w-full sm:ml-3 sm:w-auto @(error is not null ? "" : "hidden")">@(Id is null ? "Save New Entry" : "Update")</button>
    <a href="/cir-library" class="btn mt-3 sm:mt-0 inline-flex w-full sm:ml-3 sm:w-auto">Cancel</a>
</EditForm> 

@code {
    [Parameter]
    public Guid? Id { get; set; }
    public ObjModels.Entry EntryObj = null!;
    public EntryViewModel viewModel = new EntryViewModel();
    public string error { get; set; } ="";

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if ( Id is not null){
            using var Context = await Factory.CreateDbContext(new ClaimsPrincipal());
            EntryObj = Services.GetEntryById((Guid)Id, Context);
            if (EntryObj is not null){
                viewModel.IdInSource = EntryObj.IdInSource;
                viewModel.SourceId = EntryObj.SourceId;
                viewModel.CIRId = EntryObj.CIRId;
                viewModel.SourceOwnerId = EntryObj.SourceOwnerId;
                viewModel.Name = EntryObj.Name;
                viewModel.Description = EntryObj.Description;
                viewModel.Inactive = EntryObj.Inactive;
                viewModel.CategoryId = EntryObj.CategoryId;
                viewModel.RegistryId = EntryObj.RegistryId;
            }else{                
                NavigationManager.NavigateTo("/cir-library");
            }
        } 
    }
    private async Task HandleSubmit()
    {   
        try{            
            using var Context = await Factory.CreateDbContext(new ClaimsPrincipal());
            if( Id is null){
                Services.CreateNewEntry(viewModel,Context);
            }else{
                Services.UpdateEntry((Guid)Id, viewModel ,Context);            
            }
            NavigationManager.NavigateTo("/cir-library");
        }
        catch( Exception ex )
        {
            error = ex.Message;
        }
        finally
        {
           StateHasChanged();
        }
    }
    
    void DeleteRegistry(Guid Id){
        var Context = Factory.CreateDbContext(new ClaimsPrincipal());
        Services.DeleteEntryById(Id, Context.Result);
        NavigationManager.NavigateTo("/cir-library");
    }
}
