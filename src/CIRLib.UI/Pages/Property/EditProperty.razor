@page "/edit-property"
@page "/edit-property/{Id:guid}"

@using CIRLIB.UI.Pages;
@using Microsoft.Extensions.Logging;
@using System.Security.Claims;
@using Microsoft.AspNetCore.Components.Forms;
@using ObjModels = CIRLib.ObjectModel.Models;
@using CIRServices;

@inject PropertyServices Services
@inject NavigationManager NavigationManager
@inject CIRLib.Persistence.CIRLibContextFactory Factory 
@inject ILogger<PropertyViewModel> Logger

@if (Id is null )
{
    <PageTitle> Add Property</PageTitle>
    <h3> Add a new Property</h3>
}else{
    <PageTitle> Edit Property</PageTitle>
    <h3> Edit Property</h3>
}

@if ( !string.IsNullOrEmpty(error) )
        {
            <div class="col-span-full">
                <span class="text-red-500">@error</span>
            </div>
}
<EditForm Model="@viewModel" OnValidSubmit="@HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="grid gap-2">
        <div>
            <label>
                <h3 class="col-span-2">Property Id 
                    @if (Id is not null ){  
                        <button type ="button" style="float:right" class="btn btn-danger" @onclick="(() =>DeleteProperty((Guid)Id))">
                                Delete
                        </button>
                    }
                </h3>
                @if (Id is null ){                            
                    <InputText type="text" @bind-Value="viewModel.PropertyId" 
                        placeholder="Enter Property Id" class="form-input w-full" />
                }else{
                    <InputText readonly="true" type="text" @bind-Value="viewModel.PropertyId"
                        class="form-input w-full" />
                }
            </label>
        </div>
        <div>
            <label>
                <h3>Property Value</h3>
                <InputText type="text" class="form-input w-full" @bind-Value="viewModel.PropertyValue" />
            </label>
        </div>
        <div>
            <label>
                <h3>Data Type</h3>
                <InputText type="text" class="form-input w-full" @bind-Value="viewModel.DataType" />
            </label>
        </div>
        <div>
            <label>
                <h3>Entry Id</h3>
                <InputText type="text" class="form-input w-full" @bind-Value="viewModel.EntryId" />
            </label>
        </div>
    </div>
    <button type="submit" class="btn-primary inline-flex w-full sm:ml-3 sm:w-auto @(error is not null ? "" : "hidden")">@(Id is null ? "Save New Property" : "Update")</button>
    <a href="/cir-library" class="btn mt-3 sm:mt-0 inline-flex w-full sm:ml-3 sm:w-auto">Cancel</a>
</EditForm> 

@code {
    [Parameter]
    public Guid? Id { get; set; }
    public ObjModels.Property? PropertyObj = null;
    public PropertyViewModel viewModel = new PropertyViewModel();
    public string error { get; set; } ="";

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if ( Id is not null){
            using var Context = await Factory.CreateDbContext(new ClaimsPrincipal());
            PropertyObj = Services.GetPropertyById((Guid)Id, Context);
            if (PropertyObj is not null)
            {
                viewModel.PropertyId = PropertyObj.PropertyId;
                viewModel.DataType = PropertyObj.DataType;
                viewModel.EntryId = PropertyObj.EntryIdInSource;
            }
            else
            {                
                NavigationManager.NavigateTo("/cir-library");
            }
        } 
    }
    private async Task HandleSubmit()
    {   
        try
        {
            using var Context = await Factory.CreateDbContext(new ClaimsPrincipal());
            if (Id is null)
            {
                Services.CreateNewProperty(viewModel, Context);
            }
            else
            {
                Services.UpdateProperty((Guid)Id, viewModel, Context);            
            }
            NavigationManager.NavigateTo("/cir-library");
        }
        catch( Exception ex )
        {
            error = ex.Message;
        }
        finally
        {
           StateHasChanged();
        }
    }
    
    void DeleteProperty(Guid Id){
        var context = Factory.CreateDbContext(new ClaimsPrincipal());
        Services.DeletePropertyById(Id, context.Result);
        NavigationManager.NavigateTo("/cir-library");
    }
}
