@page "/property-view"

@using ObjModels = CIRLib.ObjectModel.Models;
@using CIRLib.Persistence;
@using System.Security.Claims;
@using CIRServices;

@inject PropertyServices Services
@inject NavigationManager NavigationManager
@inject CIRLibContextFactory Factory


<div class="panel-heading alert-primary">
    <h3 class="panel-title" align="justify"> Property              
        <button class="btn btn-primary" @onclick="(() => AddProperty())" style="float: right;">
            <i class="oi oi-pencil"></i> Add Property
        </button> 
    </h3> 
</div> 
        
<table class="col-span-full min-w-full divide-y divide-gray-300 border roundeed data-table">
    <thead class="bg-gray-100">
        <tr>
            <th scope="col">Property Id</th>
            <th scope="col">Property DataType</th>
            <th scope="col">Entry Id</th>
            <th scope="col">Created By</th> 
            <th scope="col">Date Created</th>
            <th scope="col">Modified By</th> 
            <th scope="col">Date Modified</th>  
            <th></th>
        </tr>
    </thead>
    
    <tbody class="bg-white divide-y divide-gray-200">
        @foreach (var Property in PropertyList)
        {
            <tr>
                <td>@Property.PropertyId</td>
                <td>@Property.DataType</td>
                <td>@Property.EntryIdInSource</td>
                <td>@Property.CreatedBy</td>
                <td>@Property.DateCreated</td>
                <td>@Property.ModifiedBy</td>
                <td>@Property.DateModified</td>               
                <td> 
                    <button class="btn btn-primary" @onclick="(() =>EditProperty(Property.Id))">
                            Edit
                    </button>                    
                </td>      
            </tr>
        } 
    </tbody>
</table>

@code {
    [Parameter]
    public string SearchFilterReg { get; set;} = "";
    [Parameter]
    public string SearchFilterCat { get; set;} = "";
    [Parameter]
    public string SearchFilterEntry { get; set;} = "";
    [Parameter]
    public string SearchFilterProperty { get; set;} = "";
    [Parameter]
    public string SearchFilterPropertyValue { get; set;} = "";
    public List<ObjModels.Property> PropertyList{ get; set; } = new List<ObjModels.Property>();

    protected override async Task OnParametersSetAsync()
    {
        await SearchForProperty();
        await base.OnParametersSetAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        using var Context = await Factory.CreateDbContext(new ClaimsPrincipal());
        PropertyList = Services.GetAllProperties(Context);
        await base.OnInitializedAsync();
    }
    
    void EditProperty(Guid Id){
        NavigationManager.NavigateTo($"/edit-property/{Id}");
    }

    void AddProperty(){
        NavigationManager.NavigateTo("/edit-property");
    }    
    async Task SearchForProperty(){
        
        var Context = Factory.CreateDbContext(new ClaimsPrincipal());
        PropertyList = Services.GetPropertiesFromFilters(SearchFilterReg, SearchFilterCat, SearchFilterEntry,
            SearchFilterProperty, SearchFilterPropertyValue, Context.Result);

    }

}
