@page "/edit-property-value"
@page "/edit-property-value/{Id:guid}"

@using CIRLIB.UI.Pages;
@using Microsoft.Extensions.Logging;
@using System.Security.Claims;
@using Microsoft.AspNetCore.Components.Forms;
@using ObjModels = CIRLib.ObjectModel.Models;
@using CIRServices;

@inject PropertyValueServices Services
@inject NavigationManager NavigationManager
@inject CIRLib.Persistence.CIRLibContextFactory Factory 
@inject ILogger<PropertyValueViewModel> Logger

@if (Id is null )
{
    <PageTitle> Add Property Value</PageTitle>
    <h3> Add a new Property Value</h3>
}else{
    <PageTitle> Edit Property Value</PageTitle>
    <h3> Edit Property Value</h3>
}

@if ( !string.IsNullOrEmpty(error) )
        {
            <div class="col-span-full">
                <span class="text-red-500">@error</span>
            </div>
}
<EditForm Model="@viewModel" OnValidSubmit="@HandleSubmit">
    <Modal Title="PropertyValue">  
        <ChildContent>
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="grid gap-2">
                <div>
                    <label>
                        <h3 class="col-span-2">Property Key 
                            @if (Id is not null ){  
                                <button type ="button" style="float:right" class="btn btn-danger" @onclick="(() =>DeleteProperty((Guid)Id))">
                                        Delete
                                </button>
                            }
                        </h3>
                        @if (Id is null ){                            
                            <InputText type="text" @bind-Value="viewModel.Key" 
                                placeholder="Enter Property Key" class="form-input w-full" />
                        }else{
                            <InputText readonly="true" type="text" @bind-Value="viewModel.Key"
                                class="form-input w-full" />
                        }
                    </label>
                </div>
                <div>
                    <label>
                        <h3>Property Value</h3>
                        <InputText type="text" class="form-input w-full" @bind-Value="viewModel.Value" />
                    </label>
                </div>
                <div>
                    <label>
                        <h3>Unit Of Measure</h3>
                        <InputText type="text" class="form-input w-full" @bind-Value="viewModel.UnitOfMeasure" />
                    </label>
                </div>
                <div>
                    <label>
                        <h3>Property Ref Id</h3>
                        <InputText type="text" class="form-input w-full" @bind-Value="viewModel.PropertyRefId" />
                    </label>
                </div>
            </div>
        </ChildContent>
        <Footer>
            <button type="submit" class="btn-primary inline-flex w-full sm:ml-3 sm:w-auto @(error is not null ? "" : "hidden")">@(Id is null ? "Save New Property Value" : "Update")</button>
            <a href="/cir-library" class="btn mt-3 sm:mt-0 inline-flex w-full sm:ml-3 sm:w-auto">Cancel</a>
        </Footer>
    </Modal>
</EditForm> 

@code {
    [Parameter]
    public Guid? Id { get; set; }
    public ObjModels.PropertyValue PropertyValueObj;
    public PropertyValueViewModel viewModel = new PropertyValueViewModel();
    public string error { get; set; } ="";

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if ( Id is not null){
            using var Context = await Factory.CreateDbContext(new ClaimsPrincipal());
            PropertyValueObj = Services.GetPropertyValueById((Guid)Id, Context);
            if (PropertyValueObj is not null)
            {
                viewModel.Key = PropertyValueObj.Key;
                viewModel.Value = PropertyValueObj.Value;
                viewModel.UnitOfMeasure = PropertyValueObj.UnitOfMeasure;
                viewModel.PropertyRefId = PropertyValueObj.PropertyRefId;
            }else
            {                
                NavigationManager.NavigateTo("/cir-library");
            }
        } 
    }
    private async Task HandleSubmit()
    {   
        try{
            using var context = await Factory.CreateDbContext(new ClaimsPrincipal());
            if( Id is null)
            {
                Services.CreateNewPropertyValue(viewModel,null,context);
            }
            else
            {
                Services.UpdatePropertyValue((Guid)Id, viewModel ,context);            
            }
            NavigationManager.NavigateTo("/cir-library");
        }
        catch( Exception ex )
        {
            error = ex.Message;
        }
        finally
        {
           StateHasChanged();
        }
    }
    
    void DeleteProperty(Guid Id)
    {
        var context = Factory.CreateDbContext(new ClaimsPrincipal());
        Services.DeletePropertyValueById(Id, context.Result);
        NavigationManager.NavigateTo("/cir-library");
    }
}
