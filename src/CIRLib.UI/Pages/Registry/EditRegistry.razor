@page "/edit-registry"
@page "/edit-registry/{Id:guid}"

@using CIRLIB.UI.Pages;
@using Microsoft.Extensions.Logging;
@using System.Security.Claims;
@using Microsoft.AspNetCore.Components.Forms
@using ObjModels = CIRLib.ObjectModel.Models;
@using CIRServices;

@inject RegistryServices Services
@inject NavigationManager NavigationManager
@inject CIRLib.Persistence.CIRLibContextFactory Factory 
@inject ILogger<RegistryViewModel> Logger

@if (Id is null )
{
    <PageTitle> Add Registry</PageTitle>
    <h3> Add a new Registry</h3>
}else{
    <PageTitle> Edit Registry</PageTitle>
    <h3> Edit Registry</h3>
}

<EditForm Model="@viewModel" OnValidSubmit="@HandleSubmit">
    <Modal Title="Registry">  
        <ChildContent>
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="grid gap-2">
                <div>
                    <label>
                        <h3 class="col-span-2">Registry Id 
                            @if (Id is not null ){  
                                <button type ="button" style="float:right" class="btn btn-danger" @onclick="(() =>DeleteRegistry((Guid)Id))">
                                        Delete
                                </button>
                            }
                        </h3>
                        @if (Id is null ){                            
                            <InputText type="text" @bind-Value="viewModel.RegistryId" 
                                placeholder="Enter Registry Id" class="form-input w-full" />
                        }else{
                            <InputText readonly="true" type="text" @bind-Value="viewModel.RegistryId"
                                class="form-input w-full" />
                        }
                    </label>
                </div>
                <div>
                    <label>
                        <h3>Description</h3>
                        <InputText type="text" class="form-input w-full" @bind-Value="viewModel.Description" />
                    </label>
                </div>
            </div>
        </ChildContent>
        <Footer>
            <button type="submit" class="btn-primary inline-flex w-full sm:ml-3 sm:w-auto">@(Id is null ? "Save New Registry" : "Update")</button>
            <a href="/cir-library" class="btn mt-3 sm:mt-0 inline-flex w-full sm:ml-3 sm:w-auto">Cancel</a>
        </Footer>
    </Modal>
</EditForm> 

@code {
    [Parameter]
    public Guid? Id { get; set; }
    public ObjModels.Registry RegObj;
    public RegistryViewModel viewModel = new RegistryViewModel();

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if ( Id is not null){
            using var Context = await Factory.CreateDbContext(new ClaimsPrincipal());
            RegObj = Services.GetRegistryById((Guid)Id, Context);
            if (RegObj is not null){
                viewModel.RegistryId = RegObj.RegistryId;
                viewModel.Description = RegObj.Description;
            }else{                
                NavigationManager.NavigateTo("/cir-library");
            }
        } 
    }
    private async Task HandleSubmit()
    {   
        using var Context = await Factory.CreateDbContext(new ClaimsPrincipal());
        if( Id is null){
            Services.CreateNewRegistry(viewModel,Context);
        }else{
            Services.UpdateRegistry((Guid) Id, viewModel ,Context);            
        }
        NavigationManager.NavigateTo("/cir-library");
    }
    
    void DeleteRegistry(Guid Id){
        var Context = Factory.CreateDbContext(new ClaimsPrincipal());
        Services.DeleteRegistryById((Guid)Id, Context.Result);
        NavigationManager.NavigateTo("/cir-library");
    }
}
