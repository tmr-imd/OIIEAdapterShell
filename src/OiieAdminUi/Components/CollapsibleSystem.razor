@using Microsoft.Extensions.Logging
@using AuthenticationExtesion.Support
@using CIRLib.ObjectModel.Models
@using OiieAdminUi.Extensions

@inject IJSRuntime JS
@inject ILogger<CollapsibleSystem> Logger
@inject RoleMappingService RoleMappingsAccess

@if (!string.IsNullOrWhiteSpace(EditRoleId))
{
    <ManageRole @bind-RoleId="EditRoleId" SystemId="@System.Id" BackTo="/admin/roles" />
}

<div>
    <button type="button" @onclick="OnClick" class="group inline-flex gap-x-2 w-full text-left hover:font-semibold">
        <svg class="flex-none -mr-1 h-6 w-6 text-gray-400 @(IsExpanded ? "rotate-0" : "-rotate-90")" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
            <path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd" />
        </svg>
        <span class="grow">@System.GetPrimaryName() <small class="text-gray-400 inline-block">@System.GetSecondaryName()</small></span>
        <span class="contents invisible group-hover:visible">
            @Actions
        </span>
    </button>

    <div class="ml-4 mt-2 @(IsExpanded ? "" : "hidden")">
        @foreach (var role in System.Entries)
        {
            <RoleSelector Role="@role" 
                IsSelected="@(SelectedIds.Contains(role.IdInSource))"
                OnClicked="ParentOnChildSelected">
                <Actions>
                    <button type="button" @onclick="@(() => EditRoleId = @role.Id.ToString())"
                            class="btn btn-secondary text-xs px-1 py-1">
                        <span class="sr-only">Edit Role</span>
                        <svg class="h-4 w-4" width="24"  height="24"  viewBox="0 0 24 24"  xmlns="http://www.w3.org/2000/svg"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round">  <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7" />  <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z" /></svg>
                    </button>
                    <button type="button" @onclick="@(() => DestroyRole(@role))"
                            class="btn btn-danger text-xs px-1 py-1">
                        <span class="sr-only">Remove Role</span>
                        <svg class="h-4 w-4"  fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/></svg>
                        @* <svg class="h-4 w-4"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round">  <path d="M21 4H8l-7 8 7 8h13a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2z" />  <line x1="18" y1="9" x2="12" y2="15" />  <line x1="12" y1="9" x2="18" y2="15" /></svg> *@
                    </button>
                </Actions>
            </RoleSelector>
        }
        <button type="button" @onclick="@(() => EditRoleId = "new")" class="btn btn-secondary text-sm ml-2 px-1 py-1 rounded-full font-semibold">
            <span aria-hidden="true">
                <svg class="h-3 w-3 self-center"  fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
                </svg>
            </span>
            <span class="sr-only">Add Role</span>
        </button>
    </div>
</div>

@code {
    [Parameter]
    public Category System { get; set; } = null!;

    [Parameter]
    public EventCallback<Entry> ParentOnChildSelected { get; set; }
    
    [Parameter]
    public IEnumerable<string> SelectedIds { get; set; } = Array.Empty<string>();
    
    [Parameter]
    public RenderFragment Actions { get; set; } = null!;

    private bool IsExpanded { get; set; } = false;

    private string EditRoleId { get; set; } = "";

    protected override Task OnParametersSetAsync()
    {
        if (SelectedIds.Any(roleId => System.Entries.Any(e => e.IdInSource == roleId)) && !IsExpanded) IsExpanded = true;
        return base.OnParametersSetAsync();
    }

    private void OnClick()
    {
        IsExpanded = !IsExpanded;
    }

    private async Task DestroyRole(Entry role)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to remove the role '{role.Name}'? All mappings to this role will also be deleted.");
        if (confirmed)
        {
            RoleMappingsAccess.RemoveRole(role.Id);
            Logger.LogInformation("Removed Role ID {}", role.Id);
        }
    }
}
