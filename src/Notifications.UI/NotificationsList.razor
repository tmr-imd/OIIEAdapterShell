@* @addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers *@
@using System.Text.Json;
@using System.Security.Claims;
@using Notifications.ObjectModel;
@using Notifications.ObjectModel.Models;
@using Notifications.Persistence;

@inject ClaimsPrincipal Principal
@inject NavigationManager Navigation
@inject INotificationService NotificationsService
@inject NotificationsContextFactory Factory

@implements IAsyncDisposable

<div class="my-component">
    <p>This component is defined in the <strong>Notifications.UI</strong> library.</p>
    <div>
        <p>Connection Id: @ConnectionId</p>
        <button class="btn" @onclick="Test" disabled="@(!IsConnected)">Test</button>
        <ul>
        @foreach (var n in notifications)
        {
            <li>@n</li>
        }
        </ul>
    </div>
</div>

@code {
    private string ConnectionId { get; set; } = "";

    private List<string> notifications = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        ConnectionId = await NotificationsService.RegisterLocal("test", async notification => 
        {
            @* await viewModel.Load(context); *@
            notifications.Add(notification.Data.Deserialize<string>() ?? "Unknown message");
            await InvokeAsync(StateHasChanged);
            using var context = await Factory.CreateDbContext(Principal);
            var state = new NotificationState()
            {
                Id = Guid.NewGuid(),
                NotificationRefId = notification.Id,
                ReadState = ReadState.Read,
                Principal = Principal?.Identity?.Name ?? ""
            };

            if (!string.IsNullOrWhiteSpace(state.Principal))
            {
                context.Add(state);
                await context.SaveChangesAsync();
            }
        });

        await base.OnInitializedAsync();
    }

    private void Test()
    {
        @* notifications.Add("Manually added test"); *@
        @* await hubConnection.InvokeAsync("SendMessage", "test", JsonSerializer.SerializeToDocument($"Message sent at {DateTime.Now}")); *@
        NotificationsService.Notify(Scope.Internal, "test", JsonSerializer.SerializeToDocument($"Message sent at {DateTime.Now}"), ConnectionId);
    }

    @* public bool IsConnected => hubConnection?.State == HubConnectionState.Connected; *@
    public bool IsConnected => !string.IsNullOrWhiteSpace(ConnectionId);

    public async ValueTask DisposeAsync()
    {
        await NotificationsService.Unregister(ConnectionId);
    }
}