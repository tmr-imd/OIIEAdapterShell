@* @addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers *@
@using System.Text.Json;
@using System.Security.Claims;
@using Notifications.ObjectModel;
@using Notifications.ObjectModel.Models;
@using Notifications.Persistence;

@inject ClaimsPrincipal Principal
@inject NavigationManager Navigation
@inject INotificationService NotificationsService
@inject NotificationsContextFactory Factory

@implements IAsyncDisposable

<div class="">
    <p>To be converted into a modal. Don't forget to remove the 'Test' button.</p>
    <div>
        <button class="btn" @onclick="Test" disabled="@(!IsConnected)">Test</button>
        <ul>
        @foreach (var n in notifications)
        {
            <li class="my-3">@(n.Data.Deserialize<string>()) <button class="btn" @onclick="() => MarkRead(n)" disabled="@(!IsConnected)">Mark Read</button></li>
        }
        </ul>
    </div>
</div>

@code {
    private List<string> ConnectionId { get; set; } = new();

    private List<Notification> notifications = new();

    protected override async Task OnInitializedAsync()
    {
        ConnectionId.Add(await NotificationsService.RegisterLocal("test", UpdateNotifications));
        ConnectionId.Add(await NotificationsService.RegisterLocal("admin-important", UpdateNotifications));
        ConnectionId.Add(await NotificationsService.RegisterLocal("publication-message-update", UpdateNotifications));
        ConnectionId.Add(await NotificationsService.RegisterLocal("request-message-update", UpdateNotifications));

        using var context = await Factory.CreateDbContext(Principal);
        var who = Principal.Identity?.Name;
        notifications = context.Notifications
            .Where(n => n.ReadState != ReadState.Read)
            .Where(n => !n.NotificationStates.Any(ns => ns.Principal == who && ns.ReadState == ReadState.Read) )
            .OrderByDescending(n => n.DateCreated)
            .ToList();

        await base.OnInitializedAsync();
    }

    private void Test()
    {
        @* notifications.Add("Manually added test"); *@
        @* await hubConnection.InvokeAsync("SendMessage", "test", JsonSerializer.SerializeToDocument($"Message sent at {DateTime.Now}")); *@
        NotificationsService.Notify(Scope.Local, "test", JsonSerializer.SerializeToDocument($"Message sent at {DateTime.Now}"), ConnectionId[0]);
    }

    private async void MarkRead(Notification notification)
    {
        using var context = await Factory.CreateDbContext(Principal);
        var state = new NotificationState()
        {
            Id = Guid.NewGuid(),
            NotificationRefId = notification.Id,
            ReadState = ReadState.Read,
            Principal = Principal?.Identity?.Name ?? ""
        };

        if (!string.IsNullOrWhiteSpace(state.Principal))
        {
            context.Add(state);
            await context.SaveChangesAsync();
        }

        notifications.Remove(notification);
        await InvokeAsync(StateHasChanged);
    }

    @* public bool IsConnected => hubConnection?.State == HubConnectionState.Connected; *@
    public bool IsConnected => ConnectionId.Count() > 0;

    public async ValueTask DisposeAsync()
    {
        foreach (var conn in ConnectionId)
        {
            await NotificationsService.Unregister(conn);
        }
    }

    private async void UpdateNotifications(Notification notification)
    {
        @* await viewModel.Load(context); *@
        notifications.Insert(0, notification);
        await InvokeAsync(StateHasChanged);
    }
}