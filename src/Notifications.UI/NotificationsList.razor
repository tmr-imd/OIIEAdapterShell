@* @addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers *@
@using System.Text.Json;
@using System.Security.Claims;
@using Notifications.ObjectModel;
@using Notifications.ObjectModel.Models;
@using Notifications.Persistence;

@inject ClaimsPrincipal Principal
@inject NavigationManager Navigation
@inject INotificationService NotificationsService
@inject NotificationsContextFactory Factory
@inject NotificationsJs Js

@implements IAsyncDisposable

<div class="">
    <div>
        <button class="btn" type="submit" @onclick="Test" disabled="@(!IsConnected)">Test</button>
        <button class="btn" type="submit" @onclick="MarkReadAll" disabled="@(!IsConnected)">Mark All as Read</button>
        <ul>
        @foreach (var n in notifications)
        {
            @* n.ReadState; *@
            var data = n.Data.Deserialize<UserData>();
            <li class="border rounded shadow-sm hover:bg-gray-100 my-4 p-3 flex">
                <div class="flex-auto">
                    <h5 class="font-bold not-italic text-base tracking-tight pb-1 text-gray-900">@data?.Summary</h5>
                    <p class="max-w-prose p-0 text-gray-600">@data?.Detail</p>
                    <p class="max-w-prose p-0 text-gray-600"><a href="@(GetEntityUrl(data?.EntityType, data?.EntityId))">See detail</a></p>
                </div>
                <div>
                    <button class="btn group ml-4 px-1" type="submit" @onclick="() => MarkRead(n)" disabled="@(!IsConnected)" title="Mark Read">
                        <span class="sr-only">Mark Read</span><span class="h-4"><!-- For height/baseline alignment --></span>
                        <svg class="h-5 w-6"  width="24" height="20" viewBox="0 2 24 20" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">  <circle cx="12" cy="12" r="2" />  <path d="M2 12l1.5 2a11 11 0 0 0 17 0l1.5 -2" />  <path d="M2 12l1.5 -2a11 11 0 0 1 17 0l1.5 2" /></svg>
                        <svg class="h-5 w-6 absolute opacity-0 group-hover:opacity-100 transition-opacity"  width="24" height="20" viewBox="0 2 24 20" stroke-width="2" stroke="currentColor" fill="currentColor" stroke-linecap="round" stroke-linejoin="round">  <circle cx="12" cy="12" r="2" />  <path d="M2 12l1.5 2a11 11 0 0 0 17 0l1.5 -2" />  <path d="M2 12l1.5 -2a11 11 0 0 1 17 0l1.5 2" /></svg>
                    </button>
                </div>
            </li>
        }
        </ul>
    </div>
</div>

@code {
    private List<string> ConnectionId { get; set; } = new();

    private List<Notification> notifications = new();

    protected override async Task OnInitializedAsync()
    {
        ConnectionId.Add(await NotificationsService.RegisterLocal("test", UpdateNotifications));
        ConnectionId.Add(await NotificationsService.RegisterLocal("admin-important", UpdateNotifications));
        ConnectionId.Add(await NotificationsService.RegisterLocal("publication-message-update", UpdateNotifications));
        ConnectionId.Add(await NotificationsService.RegisterLocal("request-message-update", UpdateNotifications));

        using var context = await Factory.CreateDbContext(Principal);
        var who = Principal.Identity?.Name;
        notifications = context.Notifications
            .Where(n => n.ReadState != ReadState.Read)
            .Where(n => !n.NotificationStates.Any(ns => ns.Principal == who && ns.ReadState == ReadState.Read) )
            .OrderByDescending(n => n.DateCreated)
            .ToList();

        await base.OnInitializedAsync();
    }

    private string GetEntityUrl(string? entityType, Guid? entityId)
    {
        if (string.IsNullOrWhiteSpace(entityType) || entityId is null || entityId == Guid.Empty) return "#";
        return "/todo";
    }

    private void Test()
    {
        @* notifications.Add("Manually added test"); *@
        @* await hubConnection.InvokeAsync("SendMessage", "test", JsonSerializer.SerializeToDocument($"Message sent at {DateTime.Now}")); *@
        var data = new UserData("Notification Test", $"Message sent at {DateTime.Now}", typeof(UserData).FullName, null);
        NotificationsService.Notify(Scope.Local, "admin-important", JsonSerializer.SerializeToDocument(data), ConnectionId[0]);
    }

    private async void MarkRead(Notification notification)
    {
        using var context = await Factory.CreateDbContext(Principal);
        var state = new NotificationState()
        {
            Id = Guid.NewGuid(),
            NotificationRefId = notification.Id,
            ReadState = ReadState.Read,
            Principal = Principal?.Identity?.Name ?? ""
        };

        if (!string.IsNullOrWhiteSpace(state.Principal))
        {
            context.Add(state);
            await context.SaveChangesAsync();
        }

        notifications.Remove(notification);
        await InvokeAsync(StateHasChanged);

        await Js.UpdateCounter(notifications.Count, false);
    }

    private async void MarkReadAll()
    {
        using var context = await Factory.CreateDbContext(Principal);
        var state = new NotificationState()
        {
            ReadState = ReadState.Read,
            Principal = Principal?.Identity?.Name ?? ""
        };
        foreach (var notification in notifications)
        {
            state = state with
            {
                Id = Guid.NewGuid(),
                NotificationRefId = notification.Id,
            };

            if (!string.IsNullOrWhiteSpace(state.Principal))
            {
                context.Add(state);
            }

        }

        notifications.Clear();
        await context.SaveChangesAsync();
        await InvokeAsync(StateHasChanged);

        await Js.UpdateCounter(0, false);        
    }

    @* public bool IsConnected => hubConnection?.State == HubConnectionState.Connected; *@
    public bool IsConnected => ConnectionId.Count() > 0;

    public async ValueTask DisposeAsync()
    {
        foreach (var conn in ConnectionId)
        {
            await NotificationsService.Unregister(conn);
        }
    }

    private async void UpdateNotifications(Notification notification)
    {
        @* await viewModel.Load(context); *@
        notifications.Insert(0, notification);
        await InvokeAsync(StateHasChanged);
    }
}