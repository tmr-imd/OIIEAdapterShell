@* @addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers *@
@using System.Text.Json;
@using System.Security.Claims;
@using Notifications.ObjectModel;
@using Notifications.ObjectModel.Models;
@using Notifications.Persistence;

@inject ClaimsPrincipal Principal
@inject INotificationService NotificationsService
@inject NotificationsContextFactory Factory
@inject NotificationsJs Js

@implements IAsyncDisposable

<div class="notifications-nav relative inline-flex align-top w-fit">
    <span class="sr-only">Notifications</span>
    <div
        class="count-badge absolute bottom-auto left-2/4 right-auto top-2/4 z-10 inline-block -translate-x-2/4 -translate-y-1/2 rotate-0 skew-x-0 skew-y-0 scale-x-100 scale-y-100 text-xs text-white">
        @Count
    </div>
    <div
        class="flex items-center justify-center rounded-lg text-center">
        <div>
        <svg
            aria-hidden="true"
            focusable="false"
            data-prefix="fas"
            data-icon="bell"
            class="mx-auto w-7"
            role="img"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 448 512">
            <path
            fill="currentColor"
            d="M224 512c35.32 0 63.97-28.65 63.97-64H160.03c0 35.35 28.65 64 63.97 64zm215.39-149.71c-19.32-20.76-55.47-51.99-55.47-154.29 0-77.7-54.48-139.9-127.94-155.16V32c0-17.67-14.32-32-31.98-32s-31.98 14.33-31.98 32v20.84C118.56 68.1 64.08 130.3 64.08 208c0 102.3-36.15 133.53-55.47 154.29-6 6.45-8.66 14.16-8.61 21.71.11 16.4 12.98 32 32.1 32h383.8c19.12 0 32-15.6 32.1-32 .05-7.55-2.61-15.27-8.61-21.71z"></path>
        </svg>
        <span class="animation-restartable animate-[ping_1s_cubic-bezier(0,0,0.2,1)_3] opacity-0 absolute top-4/5 left-2/4 right-auto block -translate-x-2/4 -translate-y-1/2 h-1 w-1 rounded-full ring-2 ring-green-400 bg-green-600"></span>
        </div>
    </div>
</div>

@code {
    private int Count { get; set; } = 0;
    private List<string> ConnectionId { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        ConnectionId.Add(await NotificationsService.RegisterLocal("admin-important", UpdateCount));
        ConnectionId.Add(await NotificationsService.RegisterLocal("publication-message-update", UpdateCount));
        ConnectionId.Add(await NotificationsService.RegisterLocal("request-message-update", UpdateCount));

        using var context = await Factory.CreateDbContext(Principal);
        // TODO: proper unread state per user/principal
        var who = Principal.Identity?.Name;
        Count = context.Notifications
            .Where(n => n.ReadState != ReadState.Read)
            .Where(n => !n.NotificationStates.Any(ns => ns.Principal == who && ns.ReadState == ReadState.Read) )
            .Count();

        await base.OnInitializedAsync();
    }

    @* public bool IsConnected => hubConnection?.State == HubConnectionState.Connected; *@
    public bool IsConnected => ConnectionId.Count() > 0;

    public async ValueTask DisposeAsync()
    {
        foreach (var conn in ConnectionId)
        {
            await NotificationsService.Unregister(conn);
        }
    }

    private async void UpdateCount(Notification notification)
    {
        var message = notification.Data.Deserialize<string>() ?? "Unknown message";
        using var context = await Factory.CreateDbContext(Principal);
        // TODO: proper unread state per user/principal
        var who = Principal.Identity?.Name;
        Count = context.Notifications
            .Where(n => n.ReadState != ReadState.Read)
            .Where(n => !n.NotificationStates.Any(ns => ns.Principal == who && ns.ReadState == ReadState.Read) )
            .Count();
        await Js.UpdateCounter(Count, true);
    }
}