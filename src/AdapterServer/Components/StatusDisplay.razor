
<div class="overflow-hidden">
    <div class="@StatusHidden grid oveflow-hidden w-full rounded @(ColourClassForStatusType(Level)) border items-center transition-all origin-top delay-150 ease-in-out duration-700">
        <p class="px-4 py-1 w-full oveflow-hidden">
            <span>
            @if (StatusType.Warning == Level)
            {
                @* Warning, exclamation-triangle*@
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 inline align-text-top drop-shadow">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z" />
                </svg>                
            }
            else if (StatusType.Danger == Level)
            {
                @* Danger/Error, x-circle *@
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 inline align-text-top drop-shadow">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M9.75 9.75l4.5 4.5m0-4.5l-4.5 4.5M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
            }
            else
            {
                @* Info, information-circle *@
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 inline align-text-top drop-shadow">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M11.25 11.25l.041-.02a.75.75 0 011.063.852l-.708 2.836a.75.75 0 001.063.853l.041-.021M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-9-3.75h.008v.008H12V8.25z" />
                </svg>
            }
            </span>
            @StatusMessage
        </p>
    </div>
</div>

@code {
    [Parameter]
    public string StatusMessage { get; set; } = "";
    [Parameter]
    public StatusType Level { get; set; } = StatusType.Info;
    [Parameter]
    public int HideDelayMilliseconds { get; set; } = 5000;
    public int Severity { get; set; }
    private bool displayStatus = false;
    private string StatusHidden => displayStatus ? "opacity-100 scale-y-100 mb-4" : "opacity-0 scale-y-0 -translate-full mb-[calc(-50%)]";
    private DateTime expectedHideTime = DateTime.MinValue;

    protected override async Task OnParametersSetAsync()
    {
        UpdateStatus();
        await base.OnParametersSetAsync();
    }

    private void UpdateStatus()
    {
        displayStatus = !string.IsNullOrWhiteSpace(StatusMessage) && true;
        Task.Run(async () =>
            {
                var delay = TimeSpan.FromMilliseconds(HideDelayMilliseconds);
                expectedHideTime = DateTime.Now + delay;
                await Task.Delay(delay);
                if (DateTime.Now < expectedHideTime) return; // another message has taken over
                displayStatus = false;
                await InvokeAsync(StateHasChanged);
            }
        );
    }

    private string ColourClassForStatusType(StatusType type)
    {
        return type switch
        {
            StatusType.Danger => "bg-red-100 border-red-800 text-red-800",
            StatusType.Warning => "bg-yellow-100 border-yellow-800 text-yellow-800",
            StatusType.Info => "bg-teal-100 border-teal-800 text-teal-800",
            _ => "bg-teal-100 border-teal-800 text-teal-800"
        };
    }

    public enum StatusType
    {
        Info,
        Warning,
        Danger,
    }
}

