@page "/publication/{MessageId:guid}"
@using AdapterServer.Data;
@using System.Security.Claims;
@using TaskQueueing.Persistence;
@using TaskQueueing.ObjectModel.Models;
@using AdapterServer.Components

@inject ILogger<Publication> Logger

@inject PublicationDetailViewModel ViewModel
@inject NavigationManager Navigation
@inject JobContextFactory Factory
@inject ClaimsPrincipal Principal

<PageTitle>Publication - Adapter Shell</PageTitle>

<h1>Publication</h1>

<h2 class="col-span-full mt-6">Message Parameters</h2>

<div class="grid grid-cols-4 gap-2">
    <h3 class="col-span-2">Topics</h3>
    <h3>Expiry</h3>
    <h3>Status</h3>

    <div class="col-span-2">
        <div class="form-input w-full">@ViewModel.Topics</div>
    </div>
    <div>
        <div class="form-input w-full">-</div>
    </div>
    <div>
        <div class="form-input w-full flex flex-row gap-2">
            <DirectionIndicator State="ViewModel.MessageState" />
            <ProcessingIndicator State="ViewModel.MessageState" />
        </div>
    </div>

</div>

<h2 class="col-span-full mt-6">Message Content</h2>

@if (ViewModel.DetailComponentType is not null)
{
    <DynamicComponent Type="ViewModel.DetailComponentType" Parameters="ViewModel.DetailComponentParameters" />
}

@if ( !string.IsNullOrEmpty(error) )
{
    <div class="col-span-full">
        <span class="text-red-500">@error</span>
    </div>
}

@if (MessageErrors.Any() || ViewModel.RawContent is not null)
{
    <div class="col-span-full">

        <h2 class="mt-6">Message Detail</h2>
        <ErrorsDisplay Errors="@MessageErrors" />

        <h3 class="mt-3">Raw Message</h3>
        <RawMessage Content="@MessageContent" />

    </div>
}

@if (ResponseErrors.Any())
{
    <div class="col-span-full">

        <h2 class="mt-6">Response Detail</h2>
        <ErrorsDisplay Errors="@ResponseErrors" />
        
        <h3 class="mt-3">Raw Response</h3>
        <RawMessage Content="@ResponseContent" />
    </div>
}


@code {
    private string error = "";
    private string channelName = "pub-sub";

    [Parameter]
    [SupplyParameterFromQuery]
    public string? Edit { get; set; }

    [Parameter]
    public Guid MessageId { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        @* await ViewModel.LoadSettings(channelName); *@

        @* await InvokeAsync(StateHasChanged); *@

        using var context = await Factory.CreateDbContext(Principal);
        await ViewModel.Load(context, MessageId);

        await base.OnParametersSetAsync();
    }

    private IEnumerable<MessageError> MessageErrors
    {
        get
        {
            return ViewModel.Message?.MessageErrors ?? Enumerable.Empty<MessageError>();
        }
    }

    private string MessageContent
    {
        get
        {
            if (ViewModel.RawContent is not null) return ViewModel.RawContent;
            
            var doc = ViewModel.Message?.Content;
            var options = new System.Text.Json.JsonSerializerOptions(System.Text.Json.JsonSerializerOptions.Default);
            options.WriteIndented = true;
            return System.Text.Json.JsonSerializer.Serialize(doc, options);
        }
    }

    private IEnumerable<MessageError> ResponseErrors
    {
        get
        {
            @* return ViewModel.Message?.Responses?.LastOrDefault()?.MessageErrors ?? Enumerable.Empty<MessageError>(); *@
            return Enumerable.Empty<MessageError>();
        }
    }

    private string ResponseContent
    {
        get
        {
            @* var doc = ViewModel.Message?.ResponseContent;
            var options = new System.Text.Json.JsonSerializerOptions(System.Text.Json.JsonSerializerOptions.Default);
            options.WriteIndented = true;
            return System.Text.Json.JsonSerializer.Serialize(doc, options); *@
            return "";
        }
    }
}
